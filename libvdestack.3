.\"* libvdestack: a network namespace as a user library
.\" Copyright (C) 2016 Renzo Davoli. University of Bologna. <renzo@cs.unibo.it>
.\" 
.\" This library is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU Lesser General Public
.\" License as published by the Free Software Foundation; either
.\" version 2.1 of the License, or (at your option) any later version.
.\" 
.\" This library is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" Lesser General Public License for more details.
.\" 
.\" You should have received a copy of the GNU Lesser General Public
.\" License along with this library; if not, write to the Free Software
.\" Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
	
.TH libvdestack 3 2016-11-28 "VirtualSquare" "Linux Programmer's Manual"
.SH NAME
vde_addstack, vde_delstack, vde_stackcmd, vde_msocket \- vde network namespace as a user library
.SH SYNOPSIS
.B #include <vdestack.h>
.br
.BI "struct vdestack *vde_addstack(char *" vdenet ", char *" ifname ");"
.br
.BI "void vde_delstack(struct vdestack *" stack ");"
.br
.BI "int vde_stackcmd(struct vdestack *" stack ", char *" stackcmd ");"
.br
.BI "int vde_msocket(struct vdestack *" stack, int " domain ", int " type ", int " protocol ");"
.sp
These functions are provided by libvdestack. Link with \fI-lvdestack\fR.
.SH DESCRIPTION
Libvdestack implements the idea of Internet of Threads through network namespaces.
By libvdestack a program can use one (or even several) private networking protocol stack(s), thus
a program can be assigned its own IP address(es), routing etc.

\fBvde_addstack\fR creates a private network namespace: \fIvdenet\fR is the URL-like specification
of a vde network as described in \fBvde_plug\fR(1). \fIifname\fR is the name of the interface in the
network namespace. When \fIifname\fR is NULL, the default interface name is \fIvde0\fR.

\fBvde_delstack\fR destroys a vdestack when it is no longer needed.

\fBvde_stackcmd\fR run a command or a comma separated sequence of commands in the private network namespace.
The purpose of this function is to configure the networking parameters and options (e.g. IP address, routing).
For security reasons, commands must be specified using full pathnames.

\fBvde_msocket\fR has the same semantics of \fBsocket\fR(2) except that the socket is defined in the scope
of the network namespace whose descriptor is the first argument. The remaining arguments are those defined 
in \fBsocket\fR(2). 
.SH RETURN VALUE
\fBvde_addstack\fR returns a struct vdestack pointer which is used as a descriptor and thus passed as an argument 
to the other functions of this library. NULL is returned in case of error.

\fBvde_stackcmd\fR returns the exit status of the command. If the \fIstackcmd\fR argument is a comma separated sequence
of commands, the execution terminates upon the first command whose exit status is not zero, and the exit status of
that command is returned. Therefore when \fBvde_stackcmd\fR returns zero the entire sequence was successfully executed.

On success, \fBvde_msocket\fR returns a valid file descriptor. -1 is returned elseways and errno is set appropriately
as described in \fBsocket\fR(2).
.SH NOTES
Libvdestack fails if user namespaces have not been configured in the running kernel and enabled for users. 
In Debian the sysctl knob \fBkernel.unprivileged_userns_clone\fR must be set to 1.
.SH EXAMPLE
The following excerpt of C code shows the use of \fBlibvdestack\fR:
.BR
.sp
\&
.nf
#include <libvdeplug.h>

.I  ...
  int fd;
  int exit_status;
  struct vdestack *stack = vde_addstack("vde://", NULL);
  if (stack == NULL) 
.I\ \ \ \ \ ... error management
  exit_status = vde_stackcmd(stack, 
                   "/bin/ip link set vde0 up;"
                   "/bin/ip addr add 10.0.0.1/24 dev vde0;"
                   "/bin/ip route add default via 10.0.0.254");
  if (exit_status != 0)
.I\ \ \ \ \ ... error management
  fd = vde_msocket(stack, AF_INET, SOCK_STREAM, 0);
.I\ \ \ \ \ ... fd can be used in any context in which a file descriptor returned by \fBsocket\fR(2) can.
.I\ \ \ \ \ e.g. bind, accept, connect, read/write, send/recv ...
  vde_delstack(stack);
.fi
.SH SEE ALSO
\fBsocket\fR(2), \fBvde_plug\fR(1)
.SH BUGS
Bug reports should be addressed to <info@virtualsquare.org>
.SH AUTHORS
Renzo Davoli <renzo@cs.unibo.it>, Davide Berardi <berardi.dav@gmail.com>.
